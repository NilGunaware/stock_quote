// Mocks generated by Mockito 5.4.5 from annotations
// in stock_quote/test/stock_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stock_quote/models/stock.dart' as _i2;
import 'package:stock_quote/services/stock_api_service.dart' as _i3;
import 'package:stock_quote/services/storage_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStock_0 extends _i1.SmartFake implements _i2.Stock {
  _FakeStock_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StockApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockApiService extends _i1.Mock implements _i3.StockApiService {
  @override
  _i4.Future<_i2.Stock> getStockQuote(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#getStockQuote, [symbol]),
            returnValue: _i4.Future<_i2.Stock>.value(
              _FakeStock_0(this, Invocation.method(#getStockQuote, [symbol])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Stock>.value(
              _FakeStock_0(this, Invocation.method(#getStockQuote, [symbol])),
            ),
          )
          as _i4.Future<_i2.Stock>);

  @override
  _i4.Future<List<_i2.Stock>> getStocksByIndustry(String? sector) =>
      (super.noSuchMethod(
            Invocation.method(#getStocksByIndustry, [sector]),
            returnValue: _i4.Future<List<_i2.Stock>>.value(<_i2.Stock>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Stock>>.value(
              <_i2.Stock>[],
            ),
          )
          as _i4.Future<List<_i2.Stock>>);

  @override
  _i4.Future<List<_i2.Stock>> searchStocks(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchStocks, [query]),
            returnValue: _i4.Future<List<_i2.Stock>>.value(<_i2.Stock>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Stock>>.value(
              <_i2.Stock>[],
            ),
          )
          as _i4.Future<List<_i2.Stock>>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i5.StorageService {
  @override
  _i4.Future<List<String>> getWatchlist() =>
      (super.noSuchMethod(
            Invocation.method(#getWatchlist, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
            returnValueForMissingStub: _i4.Future<List<String>>.value(
              <String>[],
            ),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<void> addToWatchlist(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#addToWatchlist, [symbol]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeFromWatchlist(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#removeFromWatchlist, [symbol]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cacheStockData(_i2.Stock? stock) =>
      (super.noSuchMethod(
            Invocation.method(#cacheStockData, [stock]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Stock?> getCachedStockData(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedStockData, [symbol]),
            returnValue: _i4.Future<_i2.Stock?>.value(),
            returnValueForMissingStub: _i4.Future<_i2.Stock?>.value(),
          )
          as _i4.Future<_i2.Stock?>);

  @override
  _i4.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
